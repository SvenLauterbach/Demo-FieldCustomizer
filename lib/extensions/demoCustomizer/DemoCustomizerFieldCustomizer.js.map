{"version":3,"sources":["extensions/demoCustomizer/DemoCustomizerFieldCustomizer.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,6BAA+B;AAC/B,oCAAsC;AACtC,+BAAiC;AAEjC,8DAAiD;AACjD,oDAAiD;AACjD,kFAG8C;AAE9C,8DAAgE;AAChE,8DAAmF;AAYnF,IAAM,UAAU,GAAW,+BAA+B,CAAC;AAE3D;IACU,iDAA6D;IADvE;;IA0CA,CAAC;IAtCQ,8CAAM,GAAb;QADA,iBAiBC;QAfC,0EAA0E;QAC1E,oFAAoF;QACpF,qBAAG,CAAC,IAAI,CAAC,UAAU,EAAE,0DAA0D,CAAC,CAAC;QACjF,qBAAG,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;QACpE,qBAAG,CAAC,IAAI,CAAC,UAAU,EAAE,mFAA8E,OAAO,CAAC,KAAK,OAAG,CAAC,CAAC;QAErH,MAAM,CAAC,iBAAM,MAAM,WAAE,CAAC,IAAI,CAAC,UAAA,CAAC;YAC5B,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;gBACxC,GAAG,CAAC,KAAK,CAAC;oBACT,WAAW,EAAE,KAAI,CAAC,OAAO;iBACzB,CAAC,CAAC;gBACH,OAAO,EAAE,CAAC;YACX,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QACF,2BAA2B;IAC7B,CAAC;IAGM,oDAAY,GAAnB,UAAoB,KAA0C;QAC5D,yDAAyD;QACzD,IAAM,MAAM,GAAW,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;QACnE,IAAM,UAAU,GAAW,KAAK,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC/D,IAAM,WAAW,GAAW,KAAK,CAAC,UAAU,KAAK,EAAE,GAAG,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAErF,IAAI,SAAS,GAAG,CAAC,oBAAC,wBAAc,IAAC,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,UAAU,GAAI,CAAC,CAAA;QAEjG,QAAQ,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC;IAC/C,CAAC;IAGM,qDAAa,GAApB,UAAqB,KAA0C;QAC7D,yFAAyF;QACzF,gFAAgF;QAChF,+CAA+C;QAC/C,QAAQ,CAAC,sBAAsB,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAClD,iBAAM,aAAa,YAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IArCD;QADC,qBAAQ;+DAiBR;IAGD;QADC,qBAAQ;qEAUR;IAGD;QADC,qBAAQ;sEAOR;IACH,oCAAC;CA1CD,AA0CC,CAzCS,+CAAmB,GAyC5B;kBA1CoB,6BAA6B","file":"extensions/demoCustomizer/DemoCustomizerFieldCustomizer.js","sourcesContent":["import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\nimport * as pnp from 'sp-pnp-js';\r\n\r\nimport { Log } from '@microsoft/sp-core-library';\r\nimport { override } from '@microsoft/decorators';\r\nimport {\r\n  BaseFieldCustomizer,\r\n  IFieldCustomizerCellEventParameters\r\n} from '@microsoft/sp-listview-extensibility';\r\n\r\nimport * as strings from 'DemoCustomizerFieldCustomizerStrings';\r\nimport DemoCustomizer, { IDemoCustomizerProps } from './components/DemoCustomizer';\r\n\r\n/**\r\n * If your field customizer uses the ClientSideComponentProperties JSON input,\r\n * it will be deserialized into the BaseExtension.properties object.\r\n * You can define an interface to describe it.\r\n */\r\nexport interface IDemoCustomizerFieldCustomizerProperties {\r\n  // This is an example; replace with your own property\r\n  sampleText?: string;\r\n}\r\n\r\nconst LOG_SOURCE: string = 'DemoCustomizerFieldCustomizer';\r\n\r\nexport default class DemoCustomizerFieldCustomizer\r\n  extends BaseFieldCustomizer<IDemoCustomizerFieldCustomizerProperties> {\r\n\r\n  @override\r\n  public onInit(): Promise<void> {\r\n    // Add your custom initialization to this method.  The framework will wait\r\n    // for the returned promise to resolve before firing any BaseFieldCustomizer events.\r\n    Log.info(LOG_SOURCE, 'Activated DemoCustomizerFieldCustomizer with properties:');\r\n    Log.info(LOG_SOURCE, JSON.stringify(this.properties, undefined, 2));\r\n    Log.info(LOG_SOURCE, `The following string should be equal: \"DemoCustomizerFieldCustomizer\" and \"${strings.Title}\"`);\r\n\n    return super.onInit().then(_ => {\r\n\t\t\t\treturn new Promise<void>((resolve, reject) => {\r\n\t\t\t\t\tpnp.setup({\r\n\t\t\t\t\t\tspfxContext: this.context\r\n\t\t\t\t\t});\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t});\r\n\t\t\t});\n    //return Promise.resolve();\r\n  }\r\n\r\n  @override\r\n  public onRenderCell(event: IFieldCustomizerCellEventParameters): void {\r\n    // Use this method to perform your custom cell rendering.\r\n    const listId: string = this.context.pageContext.list.id.toString();\r\n    const listItemId: number = event.listItem.getValueByName(\"ID\");\n    const numberValue: number = event.fieldValue === \"\" ? 0 : parseInt(event.fieldValue);\r\n    \n    let component = (<DemoCustomizer number={numberValue} listId={listId} listItemId={listItemId} />)\r\n\r\n    ReactDOM.render(component, event.domElement);\r\n  }\r\n\r\n  @override\r\n  public onDisposeCell(event: IFieldCustomizerCellEventParameters): void {\r\n    // This method should be used to free any resources that were allocated during rendering.\r\n    // For example, if your onRenderCell() called ReactDOM.render(), then you should\r\n    // call ReactDOM.unmountComponentAtNode() here.\r\n    ReactDOM.unmountComponentAtNode(event.domElement);\r\n    super.onDisposeCell(event);\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}